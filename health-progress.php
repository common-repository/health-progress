<?php/*  Plugin Name: Health Progress  Plugin URI: http://sandymcfadden.com/2014/07/16/health-progress-wordpress-plugin/  Description: Creates a widget / shortcode so you can display progress in healthy measurements.  Author: Sandy McFadden  Version: 1.3  Author URI: http://sandymcfadden.com*/?><?php/*  Copyright 2014  Sandy McFadden  (email : sandymc@gmail.com)    This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License, version 2, as     published by the Free Software Foundation.    This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA*/add_filter( 'plugin_action_links_' . plugin_basename(__FILE__), 'my_plugin_action_links' );function my_plugin_action_links( $links ) {   $links[] = '<a href="'. get_admin_url(null, 'options-general.php?page=smhp_settings') .'">Settings</a>';   return $links;}function smhp_display_widget($instance = null) {  static $smhp_count = 1;    $options = get_option('smhp_options', array() );  if (empty($options)) {    return '<p>You must input settings on the plugin settings page.</p>';  }    $start_date = $options['date'];  $start_date = strtotime($start_date);  $start_date = date("M/y", $start_date);  $widget = '  <div id="smhp_widget_'. $smhp_count .'" class="smhp_widget">    <table id="smhp_widget_table_'. $smhp_count .'" class="smhp_widget_table">      <tr>        <th>&nbsp;</th>        <th>'. $start_date .'</th>        <th>'. __('Now', 'smhp_widget_domain') .'</th>        <th>'. __('Lost', 'smhp_widget_domain') .'</th>      </tr>';      $num = intval($options['num']);for ($i = 1; $i <= $num; $i++) {  $widget .= '<tr>';  $widget .= '  <td>'. __(@$options['field_'. $i . '_title'], 'smhp_widget_domain') .'</td>';  $widget .= '  <td>'. @$options['field_'. $i . '_start'] . __(@$options['field_'. $i . '_unit'], 'smhp_widget_domain') .'</td>';  $widget .= '  <td>'. @$options['field_' . $i . '_now'] . __(@$options['field_'. $i . '_unit'], 'smhp_widget_domain') .'</td>';  $widget .= '  <td><strong>'. (@$options['field_'. $i . '_start'] - @$options['field_' . $i . '_now']) . __(@$options['field_'. $i . '_unit'], 'smhp_widget_domain') .'</strong></td>';  $widget .= '</tr>';}        $widget .= '    </table>   </div>';  $smhp_count++;  return $widget;}// Creating the widget class smhp_widget extends WP_Widget {    function __construct() {    parent::__construct('smhp_widget', __('Health Progress', 'smhp_widget_domain'), array( 'description' => __( 'Display healthy measurements progress', 'smhp_widget_domain' ), ));  }  // Creating widget front-end  // This is where the action happens  public function widget( $args, $instance ) {    $title = apply_filters( 'widget_title', $instance['title'] );    if ($title == '')      $title = 'Health Progress';    // before and after widget arguments are defined by themes    echo $args['before_widget'];    if ( ! empty( $title ) )      echo $args['before_title'] . $title . $args['after_title'];    echo smhp_display_widget($instance);    echo $args['after_widget'];}// Widget Backend public function form( $instance ) {  if ( isset( $instance[ 'title' ] ) ) {    $title = $instance[ 'title' ];  }  else {    $title = __( 'Health Progress', 'smhp_widget_domain' );  }  $options = get_option('smhp_options', array() );  if (empty($options)) {    echo '<p>You must input settings on the plugin settings page.</p>';    return;  }?>  <p>    <label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label>    <input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo esc_attr( $title ); ?>">  </p><?php}  // Updating widget replacing old instances with new  public function update( $new_instance, $old_instance ) {    $instance = array();    $instance['title'] = ( ! empty( $new_instance['title'] ) ) ? strip_tags( $new_instance['title'] ) : '';    return $instance;  }} // Class smhp_widget ends here// Register and load the widgetfunction smhp_load_widget() {  register_widget( 'smhp_widget' );}add_action( 'widgets_init', 'smhp_load_widget' );/*** Display Shortcode*/function smhp_display_shortcode($instance = null) {  static $smhp_count = 1;    $options = get_option('smhp_options', array() );  if (empty($options)) {    return '<p>You must input settings on the plugin settings page.</p>';  }    $start_date = $options['date'];  $start_date = strtotime($start_date);  $start_date = date("M/y", $start_date);  $shortcode = '  <div id="smhp_shortcode_'. $smhp_count .'" class="smhp_shortcode">    <table id="smhp_shortcode_table_'. $smhp_count .'" class="smhp_shortcode_table">      <tr>        <th>&nbsp;</th>        <th>'. $start_date .'</th>        <th>'. __('Now', 'smhp_widget_domain') .'</th>        <th>'. __('Lost', 'smhp_widget_domain') .'</th>      </tr>';      $num = intval($options['num']);for ($i = 1; $i <= $num; $i++) {  $shortcode .= '<tr>';  $shortcode .= '  <td>'. __(@$options['field_'. $i . '_title'], 'smhp_widget_domain') .'</td>';  $shortcode .= '  <td>'. @$options['field_'. $i . '_start'] . __(@$options['field_'. $i . '_unit'], 'smhp_widget_domain') .'</td>';  $shortcode .= '  <td>'. @$options['field_' . $i . '_now'] . __(@$options['field_'. $i . '_unit'], 'smhp_widget_domain') .'</td>';  $shortcode .= '  <td><strong>'. (@$options['field_'. $i . '_start'] - @$options['field_' . $i . '_now']) . __(@$options['field_'. $i . '_unit'], 'smhp_widget_domain') .'</strong></td>';  $shortcode .= '</tr>';}        $shortcode .= '    </table>   </div>';  $smhp_count++;  return $shortcode;}class smhp_settings_page{    /**     * Holds the values to be used in the fields callbacks     */    private $options;    /**     * Start up     */    public function __construct()    {        add_action( 'admin_menu', array( $this, 'add_plugin_page' ) );        add_action( 'admin_init', array( $this, 'page_init' ) );    }    /**     * Add options page     */    public function add_plugin_page()    {        // This page will be under "Settings"        add_options_page(            'Health Progress',             'Health Progress',             'manage_options',             'smhp_settings',             array( $this, 'create_admin_page' )        );    }    /**     * Options page callback     */    public function create_admin_page()    {      wp_enqueue_style( 'smhp-admin-style', plugins_url( '/jquery-ui.min.css' , __FILE__ ) );      wp_enqueue_script('jquery-ui-datepicker');      wp_enqueue_script( 'smhp-script', plugins_url( '/health-progress.js' , __FILE__ ), array(), '1.0.0', true );              // Set class property        $this->options = get_option( 'smhp_options' );        if (!isset($this->options['num']) || $this->options['num'] == '')          $this->options['num'] = 1;        ?>        <div class="wrap">            <h2>Health Progress Settings</h2>                <form method="post" name="inital-settings" action="options.php">              <input type="hidden" name="smhp_form" value="initial">            <?php                // This prints out all hidden setting fields                settings_fields( 'smhp_option_group' );                   do_settings_sections( 'smhp_settings' );                submit_button();             ?>            </form>        </div>        <?php    }    /**     * Register and add settings     */    public function page_init()    {                register_setting(            'smhp_option_group', // Option group            'smhp_options', // Option name            array( $this, 'sanitize' ) // Sanitize        );        add_settings_section(            'setting_section_id', // ID            'Health Progress Settings', // Title            array( $this, 'print_section_info' ), // Callback            'smhp_settings' // Page        );                  add_settings_field(          'num',          'Number of Fields',          array($this, 'num_callback'),          'smhp_settings',          'setting_section_id'        );           add_settings_field(          'date',          'Start Date',          array($this, 'date_callback'),          'smhp_settings',          'setting_section_id'        );      $opt = get_option('smhp_options');      $num = intval($opt['num']);      if ($num == 0)        $num = 1;        if ($num > 10)          $num = 10;        for ($i = 1; $i <= $num; $i++) {          add_settings_field(              'field['.$i.']',               'Field ' . $i,               array( $this, 'field_callback' ),               'smhp_settings',               'setting_section_id',              array('num' => $i)          );           }               }    /**     * Sanitize each setting field as needed     *     * @param array $input Contains all settings fields as array keys     */    public function sanitize( $input )    {        $new_input = array();        $opt = get_option('smhp_options');        $num = intval($opt['num']);        if ($num == 0)          $num = 1;        if ($num > 10)          $num = 10;        for ($i = 1; $i <= $num; $i++) {          if (isset( $input['field_'. $i .'_title'] )) {            $new_input['field_'. $i .'_title'] = sanitize_text_field($input['field_'. $i .'_title']);            $new_input['field_'. $i .'_unit'] = sanitize_text_field($input['field_'. $i .'_unit']);            $new_input['field_'. $i .'_start'] = sanitize_text_field($input['field_'. $i .'_start']);            $new_input['field_'. $i .'_now'] = sanitize_text_field($input['field_'. $i .'_now']);          }                  }                    if (isset($input['date']))          $new_input['date'] = sanitize_text_field($input['date']);                if (isset($input['num'])) {          $new_input['num'] = sanitize_text_field($input['num']);        }                return $new_input;    }        /**      * Print the Section text     */    public function print_section_info() {        print '';    }    /**      * Get the settings option array and print one of its values     */    public function field_callback($args) {      $field_num = $args['num'];      printf('<input type="text" id="field_'. $field_num .'_title" name="smhp_options[field_'. $field_num .'_title]" value="%s" placeholder="Field Title (eg. weight)" />',        isset( $this->options['field_'. $field_num .'_title'] ) ? esc_attr( $this->options['field_'. $field_num .'_title']) : '' );      printf('<input type="text" id="field_'. $field_num .'_unit" name="smhp_options[field_'. $field_num .'_unit]" value="%s" placeholder="Field Unit (eg. lbs)" />',        isset( $this->options['field_'. $field_num .'_unit'] ) ? esc_attr( $this->options['field_'. $field_num .'_unit']) : '' );      printf('<input type="text" id="field_'. $field_num .'_start" name="smhp_options[field_'. $field_num .'_start]" value="%s" placeholder="Starting Measurement (eg. 100)" />',        isset( $this->options['field_'. $field_num .'_start'] ) ? esc_attr( $this->options['field_'. $field_num .'_start']) : '' );              printf('<input type="text" id="field_'. $field_num .'_now" name="smhp_options[field_'. $field_num .'_now]" value="%s" placeholder="Current Measurement (eg. 100)" />',        isset( $this->options['field_'. $field_num .'_now'] ) ? esc_attr( $this->options['field_'. $field_num .'_now']) : '' );             }        public function date_callback() {      printf('<input type="text" id="date" name="smhp_options[date]" value="%s" />',        isset($this->options['date']) ? esc_attr($this->options['date']) : '');    }        public function num_callback() {      $num = intval($this->options['num']);      echo '<select id="num" name="smhp_options[num]">';      for ($i = 1; $i <= 10; $i++)        echo '<option value="'. $i .'" '. (($num == $i) ? ' selected' : '') .'>'. $i .'</option>';      echo '</select>';    }}// Add shortcodefunction get_sm_health_progress_shortcode($atts) {  return smhp_display_shortcode();}add_shortcode('sm_health_progress', 'get_sm_health_progress_shortcode');if( is_admin() )    $smhp_settings_page = new smhp_settings_page();?>